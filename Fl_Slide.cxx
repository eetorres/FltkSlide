// generated by Fast Light User Interface Designer (fluid) version 1.0305

#include "Fl_Slide.h"

void fl_slide_win::cb_Draw_i(Fl_Button*, void*) {
  gl_slide->valid_data(1);
gl_slide->redraw();
}
void fl_slide_win::cb_Draw(Fl_Button* o, void* v) {
  ((fl_slide_win*)(o->parent()->user_data()))->cb_Draw_i(o,v);
}

void fl_slide_win::cb_Icono_i(Fl_Button*, void*) {
  icono();
}
void fl_slide_win::cb_Icono(Fl_Button* o, void* v) {
  ((fl_slide_win*)(o->parent()->user_data()))->cb_Icono_i(o,v);
}

void fl_slide_win::cb_Close_i(Fl_Button*, void*) {
  close();
}
void fl_slide_win::cb_Close(Fl_Button* o, void* v) {
  ((fl_slide_win*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

void fl_slide_win::cb_gl_zoom_i(Fl_Slider*, void*) {
  gl_slide->Zoom((double)gl_zoom->value());
gl_slide->redraw();
}
void fl_slide_win::cb_gl_zoom(Fl_Slider* o, void* v) {
  ((fl_slide_win*)(o->parent()->user_data()))->cb_gl_zoom_i(o,v);
}

fl_slide_win::fl_slide_win() {
  { slide_win = new Fl_Double_Window(613, 640, "Fl_Window - with Fl_Gl_Slide");
    slide_win->color((Fl_Color)147);
    slide_win->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(5, 5, 110, 20, "Draw");
      o->callback((Fl_Callback*)cb_Draw);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(120, 5, 110, 20, "Icono");
      o->down_box(FL_DOWN_BOX);
      o->callback((Fl_Callback*)cb_Icono);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(235, 5, 110, 20, "Close");
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Button* o
    { gl_slide = new Fl_Gl_Slide(6, 32, 600, 600, "Fl_Gl_Slide");
      gl_slide->box(FL_THIN_DOWN_BOX);
      gl_slide->color(FL_FOREGROUND_COLOR);
      gl_slide->selection_color(FL_BACKGROUND_COLOR);
      gl_slide->labeltype(FL_NORMAL_LABEL);
      gl_slide->labelfont(0);
      gl_slide->labelsize(14);
      gl_slide->labelcolor((Fl_Color)2);
      gl_slide->align(Fl_Align(FL_ALIGN_CENTER));
      gl_slide->when(FL_WHEN_RELEASE);
    } // Fl_Gl_Slide* gl_slide
    { gl_zoom = new Fl_Slider(350, 4, 255, 20);
      gl_zoom->type(1);
      gl_zoom->step(0.01);
      gl_zoom->value(1);
      gl_zoom->callback((Fl_Callback*)cb_gl_zoom);
    } // Fl_Slider* gl_zoom
    slide_win->end();
  } // Fl_Double_Window* slide_win
}

void fl_slide_win::close() {
  slide_win->hide();
}

void fl_slide_win::show() {
  slide_win->show();
}

void fl_slide_win::icono() {
  slide_win->iconize();
}
